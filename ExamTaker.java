
import java.io.*;
import java.util.*;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kyler
 */
public class ExamTaker extends javax.swing.JFrame {

    /**
     * Creates new form ExamTaker
     */
    public ExamTaker() {
        this.skipped = new ArrayList<>();
        this.arrayPositionNumber = 0;
        this.unansweredFlag = false;
        this.skippedPos = 0;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        answerField = new javax.swing.JTextField();
        answerLabel = new javax.swing.JLabel();
        nextButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        questionLabel = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        answerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerFieldActionPerformed(evt);
            }
        });

        answerLabel.setText("Answer:");

        nextButton.setText("Next Question");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        questionLabel.setEditable(false);
        questionLabel.setColumns(20);
        questionLabel.setRows(5);
        questionLabel.setText("Enter your name");
        jScrollPane1.setViewportView(questionLabel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(answerLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(answerField)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nextButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(exitButton)
                                .addGap(51, 51, 51)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(answerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(answerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton)
                    .addComponent(exitButton))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // TODO add your handling code here:
        if(questionLabel.getText().equals("Enter your name")) {
            studentName = answerField.getText();
            answerField.setText("");
            questionLabel.setText("Enter filename to save answers");
        } else if(questionLabel.getText().equals("Enter filename to save answers")) {
            answerFile = answerField.getText();
            answerField.setText("");
            questionLabel.setText("Enter the exam filename");
        } else if(questionLabel.getText().equals("Enter the exam filename")) {
            examFile = answerField.getText();
            if(examFile.length() >= 3) {
                File file = new File(examFile);
                try {
                    Scanner fileSc = new Scanner(file);
                    exam = new Exam(fileSc);
                    numQuestions = exam.getNumQuestions();
                    fileSc.close();
                }
                catch(FileNotFoundException e) {
                    e.printStackTrace();
                    return;
                }
            }
            answerField.setText("");
            questionLabel.setText(exam.getQuestionString(arrayPositionNumber));
        } else if(questionLabel.getText().equals("End of exam")) {
            return;
        } else if(answerField.getText().equals("")) {
            if(questionLabel.getText().equals("End of exam, returning to unanswered questions")) {
                updateLabels();
                return;
            }
            if(!skipped.contains(Integer.valueOf(arrayPositionNumber))) {
                skipped.add(Integer.valueOf(arrayPositionNumber));
                updateLabels();
                return;
            }
        } else {
            updateLabels();
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void answerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_answerFieldActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        try(PrintWriter out = new PrintWriter(answerFile)) {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
            
            LocalDateTime now = LocalDateTime.now();
            out.println(exam.getExamName());
            out.println(dtf.format(now));
            out.println(studentName+"\n");
            exam.saveStudentAnswers(out);
        } catch(FileNotFoundException e) {
            e.printStackTrace();
            return;
        }

        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void updateLabels() {
        if(unansweredFlag && skippedPos+1 > skipped.size()) {
            exam.setStudentAnswer(arrayPositionNumber, answerField.getText());
            arrayPositionNumber = numQuestions + 1;
            questionLabel.setText("End of exam");
            answerField.setText("");
            return;
        } else if(unansweredFlag && answerField.getText().length() < 1) {
            arrayPositionNumber = skipped.get(skippedPos++);
            questionLabel.setText(exam.getQuestionString(arrayPositionNumber));
            return;
        } else if(questionLabel.getText().equals("End of exam, returning to unanswered questions")) {
            arrayPositionNumber = skipped.get(skippedPos++);
            questionLabel.setText(exam.getQuestionString(arrayPositionNumber));
        } else if(unansweredFlag) {
            exam.setStudentAnswer(arrayPositionNumber, answerField.getText());
            arrayPositionNumber = skipped.get(skippedPos++);
            questionLabel.setText(exam.getQuestionString(arrayPositionNumber));

            answerField.setText("");
            return;
        }
        if(answerField.getText().length() < 1) {
            questionLabel.setText(exam.getQuestionString(++arrayPositionNumber));
            return;
        }
        if(arrayPositionNumber >= numQuestions) {
            questionLabel.setText("End of exam, returning to unanswered questions");
            unansweredFlag = true;
            exam.setStudentAnswer(arrayPositionNumber++, answerField.getText());
            answerField.setText("");
            return;
        }
        
        exam.setStudentAnswer(arrayPositionNumber++, answerField.getText());
        if(arrayPositionNumber >= numQuestions) {
            questionLabel.setText("End of exam, returning to unanswered questions");
            unansweredFlag = true;
            answerField.setText("");
            return;
        }
        questionLabel.setText(exam.getQuestionString(arrayPositionNumber));

        answerField.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExamTaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExamTaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExamTaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExamTaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        System.out.println("Kyler Boyle kboyle7");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExamTaker().setVisible(true);
            }
        });        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField answerField;
    private javax.swing.JLabel answerLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nextButton;
    private javax.swing.JTextArea questionLabel;
    // End of variables declaration//GEN-END:variables
    // More Variables declaration
    private String studentName;
    private String answerFile;
    private String examFile;
    private Exam exam;
    ArrayList<Integer> skipped;
    int arrayPositionNumber;
    int numQuestions;
    boolean unansweredFlag;
    int skippedPos;
}
